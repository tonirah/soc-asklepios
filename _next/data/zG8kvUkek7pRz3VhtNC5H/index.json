{"pageProps":{"allTasks":[{"uuid":"031b215a-dc73-41e1-bcfb-d796a173f75e","name":"Velocity increase control","difficulty":0,"category":"Central Flight System","dirtyCode":"class PropulsionController {\n  private Velocity currentSpeed;\n  ...\n\n  private void increaseMainThrust(Delta<Thrust> thrustIncrease) {\n    ...\n    this.mainRocket.increaseThrust(thrustIncrease);\n  }\n\n  public void setCurrentSpeed(Velocity currentSpeed) {\n    this.currentSpeed = currentSpeed;\n  }\n\n  public void increaseVelocity(Delta<Velocity> deltaV) throws PropulsionError {\n    Delta<Thrust> thrustIncrease = this.calculateThrustIncrease(deltaV);\n\n    // prepare main rocket engine\n    if (!this.mainRocket.isAvailable()) {\n      throw new PropulsionError(PropulsionError.messages.MAIN_UNAVAILABLE);\n    }\n    this.mainRocket.prepareForThrustIncrease();\n\n    this.increaseMainThrust(thrustIncrease);\n  }\n}","cleanCode":"class PropulsionController {\n  private Velocity currentSpeed;\n  ...\n\n  private void increaseMainThrust(Delta<Thrust> thrustIncrease) {\n    ...\n    this.mainRocket.increaseThrust(thrustIncrease);\n  }\n\n  private void prepareMainRocket() throws PropulsionError {\n    if (!this.mainRocket.isAvailable()) {\n      throw new PropulsionError(PropulsionError.messages.MAIN_UNAVAILABLE);\n    }\n    this.mainRocket.prepareForDeltaThrust();\n  }\n\n  public void setCurrentSpeed(Velocity currentSpeed) {\n    this.currentSpeed = currentSpeed;\n  }\n\n  public void increaseVelocity(Delta<Velocity> deltaV) throws PropulsionError {\n    Delta<Thrust> thrustIncrease = this.calculateThrustIncrease(deltaV);\n    this.prepareMainRocket();\n    this.increaseMainThrust(thrustIncrease);\n  }\n}","cleanCodeHighlightedLines":"10-15,23","comment":"Der durch den Kommentar beschriebene Code kann in eine Methode mit ähnlichem Namen ausgelagert werden.\n\nDann ist auch das Abstraktionsniveau innerhalb von `increaseVelocity()` konsistent.\n\nDetails: [Code Smells](/info/#code-smells), [Refactorings](/info/#refactorings).","inputs":[{"type":"Code Smell","options":[{"value":"Long Method"},{"value":"Comment","isValid":true}],"lines":"17-21"},{"type":"Refactoring","options":[{"value":"Extract Class"},{"value":"Move Method"},{"value":"Extract Method","isValid":true}],"lines":"17-21"}]},{"uuid":"bf8bb3be-bd1a-4380-8d5b-87270cb58f7c","name":"O2 Level Status","difficulty":0,"category":"Cabin Ventilation and Thermal Control","dirtyCode":"...\n  public O2LevelStatus getO2LevelStatus(OxygenSensorData  levelOfOxygen) {\n    O2LevelStatus status;\n    if (levelOfOxygen < this.lowerLimit) {\n      status = O2LevelStatus.TOO_LOW;\n    } else if (levelOfOxygen > this.upperLimit) {\n      status = O2LevelStatus.TOO_HIGH;\n    } else {\n      status = O2LevelStatus.RIGHT_AMOUNT;\n    }\n    return status;\n  }\n...","cleanCode":"...\n  public O2LevelStatus getO2LevelStatus(OxygenSensorData  levelOfOxygen) {\n    if (levelOfOxygen < this.lowerLimit) {\n      return O2LevelStatus.TOO_LOW;\n    }\n    if (levelOfOxygen > this.upperLimit) {\n      return O2LevelStatus.TOO_HIGH;\n    }\n    return O2LevelStatus.RIGHT_AMOUNT;\n  }\n...","cleanCodeHighlightedLines":"3-9","comment":"Viel besser lesbar (testbar/wartbar/erweiterbar), und in diesem Fall auch kürzer.\n\nDetails: [Refactorings](/info/#refactorings).","inputs":[{"type":"Refactoring","options":[{"value":"Extract Class"},{"value":"Move Method"},{"value":"Extract Method"},{"value":"Replace Nested Conditional with Guard Clauses","isValid":true}],"lines":"4-10"}]}]},"__N_SSG":true}