{"pageProps":{"taskData":{"uuid":"3ddf40a8-3da2-4a67-aa9b-38f9a07606a6","name":"Date Calculations","difficulty":1,"showAllOptions":true,"category":"Space Radiation Protection (SRP)","dirtyCode":"class RadiationWarning {\n  Date start;\n  Hours duration;\n\n  void logWarning() {\n    // date method\n    long HOUR_IN_MS = 3600 * 1000;\n    Date end = new Date(start.getTime() + duration * HOUR_IN_MS);\n\n    // warning\n    System.out.println(\"RadiationWarning issued at \" + start + \", valid until \"\n                       + end + \" (\" + duration + \" hours).\");\n  }\n}","cleanCode":"class RadiationWarning {\n  SOCDate start;\n  Hours duration;\n\n  void logWarning() {\n    SOCDate end = start.addHours(duration);\n    System.out.println(\"RadiationWarning issued at \" + start + \", valid until \"\n            + end + \" (\" + duration + \" hours).\");\n  }\n}\n\nclass SOCDate extends Date {\n  long HOUR_IN_MS = 3600 * 1000;\n\n  SOCDate addHours(Hours hours) {\n    return new SOCDate(this.getTime() + hours * HOUR_IN_MS);\n  }\n}","cleanCodeHighlightedLines":"6, 12-18","comment":"Da Date direkt nicht verändert werden kann, wird .","inputs":[{"type":"Refactoring","options":[{"value":"Feld Kapseln (Encapsulate Field)"},{"value":"Lokale Erweiterung einführen (Introduce Local Extension)","isValid":true},{"value":"Bedingung durch Polymorphismus ersetzen (Replace Conditional with Polymorphism)"},{"value":"Subklasse extrahieren (Extract Subclass)"}],"lines":"6-10"}]}},"__N_SSG":true}