{"pageProps":{"taskData":{"uuid":"324c5afd-eff7-4a5a-bf1e-ce284d9b4585","name":"Radiation Warning Queue","difficulty":2,"showAllOptions":false,"category":"Space Radiation Protection (SRP)","dirtyCode":"class Queue<T> extends LinkedList<T> {\n  public void enqueue(T element){\n    add(element);\n  }\n\n  public void logQueue() {\n    for (int i = 0; i < size(); i++) {\n      System.out.println(get(i));\n    }\n  }\n\n  // ...\n}\n\n// usage\nQueue<RadiationWarning> radiationWarningQueue = new Queue<>();\nradiationWarningQueue.enqueue(warning);\nradiationWarningQueue.logQueue();","cleanCode":"class Queue<T> {\n  private LinkedList<T> _linkedList = new LinkedList<>();\n\n  public void enqueue(T element){\n    _linkedList.add(element);\n  }\n\n  public void logQueue() {\n    for (int i = 0; i < _linkedList.size(); i++) {\n      System.out.println(_linkedList.get(i));\n    }\n  }\n\n  // ...\n}\n\n// usage\nQueue<RadiationWarning> radiationWarningQueue = new Queue<>();\nradiationWarningQueue.enqueue(warning);\nradiationWarningQueue.logQueue();","cleanCodeHighlightedLines":"1, 2, 5, 9, 10","comment":"Die Wiederverwendung von Code mithilfe von Vererbung bringt einige Schwierigkeiten mit sich, insbesondere wenn der geerbte Code außerhalb der eigenen Kontrolle ist. Auch das zugehörige Subtyping kann zu Schwierigkeiten führen. Durch dieses Refactoring wird die Vererbung aufgehoben, wobei die Funktionalität durch die Verwendung eines internen Delegates erhalten bleibt.","inputs":[{"type":"Refactoring","options":[{"value":"Vererbung durch Delegation ersetzen (Replace Inheritance with Delegation)","isValid":true},{"value":"Delegat verbergen (Hide Delegate)"},{"value":"Subklasse extrahieren (Extract Subclass)"},{"value":"Feld Kapseln (Encapsulate Field)"}],"lines":"1, 3, 7, 8"}]}},"__N_SSG":true}